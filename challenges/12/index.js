/**
 * The sequence of triangle numbers is generated by adding the natural numbers.
 * So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28.
 * The first ten terms would be:
 * 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
 *
 * Let us list the factors of the first seven triangle numbers:
 * 1: 1
 * 3: 1, 3
 * 6: 1, 2, 3, 6
 * 10: 1, 2, 5, 10
 * 15: 1, 3, 5, 15
 * 21: 1, 3, 7, 21
 * 28: 1, 2, 4, 7, 14, 28
 *
 * We can see that 28 is the first triangle number to have over five divisors.
 * What is the value of the first triangle number to have over n divisors?
 *
 * @param {*} num
 */

const countDivisors = num => {
  if (num < 2) {
    return 1;
  }

  let count = 0;
  while (num % 2 === 0) {
    // even factors.
    count += 1;
    num /= 2;
  }

  let divisors = count + 1;

  for (let i = 3; i <= num; i += 2) {
    count = 0;
    while (num % i === 0) {
      // odd factors
      count += 1;
      num /= i;
    }
    divisors *= count + 1;
  }
  return divisors;
};

// 1, 3, 6, 10, 15, 21, 28,
// 2, 3, 4, 5, 6, 7, 8,
const divisibleTriangleNumber = num => {
  let triangleNumber = 1;
  let i = 1;
  while (countDivisors(triangleNumber) <= num) {
    i += 1;
    // n * (n + 1) / 2
    triangleNumber = (i * (i + 1)) / 2;
  }
  return triangleNumber;
};

module.exports = divisibleTriangleNumber;
